<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="imageList1.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <data name="imageList1.ImageStream" mimetype="application/x-microsoft.net.object.binary.base64">
    <value>
        AAEAAAD/////AQAAAAAAAAAMAgAAAFdTeXN0ZW0uV2luZG93cy5Gb3JtcywgVmVyc2lvbj0yLjAuMC4w
        LCBDdWx0dXJlPW5ldXRyYWwsIFB1YmxpY0tleVRva2VuPWI3N2E1YzU2MTkzNGUwODkFAQAAACZTeXN0
        ZW0uV2luZG93cy5Gb3Jtcy5JbWFnZUxpc3RTdHJlYW1lcgEAAAAERGF0YQcCAgAAAAkDAAAADwMAAAAO
        CgAAAk1TRnQBSQFMAgEBAgEAAUgBAAFIAQABEAEAARABAAT/ASEBAAj/AUIBTQE2BwABNgMAASgDAAFA
        AwABEAMAAQEBAAEgBgABECIAAwEBAgMGAQgDCwEPAxABFQMQARUDCwEPAwYBCAMBAQIgAAMBAQIDBgEI
        AwsBDwMQARUDEAEVAwsBDwMGAQgDAQECmwABAQMFAQcDFgEfAzIBUANHAYEDUAGaA1ABmgNHAYEDMgFQ
        AxYBHwMFAQcDAAEBEwABAQMFAQcDFgEfAzIBUANHAYEDUAGaA1ABmgNHAYEDMgFQAxYBHwMFAQcDAAEB
        jwABAQMHAQoDLQFFA1UBrQN4AewDzQH+A+YB/wPmAf8DzQH+A3gB7ANVAa0DLQFFAwcBCgMAAQELAAEB
        AwcBCgMtAUUDVQGtAVkBZAF5AewBMAF/AdwB/gEmAYUB+AH/ASYBhQH4Af8BMAF/AdwB/gFZAWQBeQHs
        A1UBrQMtAUUDBwEKAwABAYgAAwUBBwMyAVEDYAHWA+kB/wPnAf8D5AH/A+MB/wPiAf8D4wH/A+cB/wPp
        Af8DYAHWAzIBUQMFAQcIAAMFAQcDMgFRAVsCYAHWASoBiQH4Af8BLQGNAfwB/wEuAY4B/QH/AS0BjQH8
        Af8BLQGMAfwB/wEtAY0B/AH/AS0BjQH8Af8BKgGJAfgB/wFbAmAB1gMyAVEDBQEHhwABAQMjATMDXQHP
        A+wB/wPmAf8D4gH/A9UB/wPVAf8D4QH/A+AB/wPiAf8D5gH/A+wB/wNdAc8DIwEzAwABAQMAAQEDIwEz
        AlwBXQHPATEBkQH7Af8BMgGSAfwB/wEzAZMB/AH/AVABlQHuAf8BWAGXAfAB/wE4AZYB/AH/ATEBkgH8
        Af8BMgGSAfwB/wEyAZIB/AH/ATEBkQH7Af8CXAFdAc8DIwEzAwABAYAAAwgBCwNMAY8D6gH/A+kB/wPl
        Af8D3gH/A3cB/wNuAf8DyQH/A+QB/wPjAf8D5AH/A+kB/wPqAf8DTAGPAwgBCwMIAQsDTAGPATIBkgH2
        Af8BOAGZAfwB/wE4AZkB/AH/ATkBlwH3Af8BKAFAAZwB/wEgASIBpwH/AVMBiAHpAf8BPwGdAf0B/wE3
        AZgB/AH/ATgBmQH8Af8BOAGZAfwB/wEyAZIB9gH/A0wBjwMIAQuAAAMdASoDYAHUA+8B/wPpAf8D5wH/
        A+UB/wOSAf8DPQH/A2wB/wPLAf8D6AH/A+cB/wPpAf8D7wH/A2AB1AMdASoDHQEqAVwCYAHUAT4BoAH8
        Af8BPgGgAfwB/wE+AaAB/AH/AT4BnwH7Af8BIAFTAaoB/wIAAWcB/wEZARsBqQH/AVcBjAHpAf8BRgGl
        Af0B/wE+AaAB/AH/AT4BoAH8Af8BPgGgAfwB/wFcAmAB1AMdASqAAAMwAUwDfgHvA/EB/wPsAf8D6gH/
        A+sB/wPlAf8DkAH/A0gB/wN0Af8DyQH/A+oB/wPsAf8D8QH/A34B7wMwAUwDMAFMAVcBaAF+Ae8BRQGo
        Af0B/wFFAacB/QH/AUUBpwH9Af8BRQGnAf0B/wFDAaMB+AH/ASIBVAGmAf8BAAEBAXYB/wEZARsBtQH/
        AVcBiQHmAf8BRwGoAfwB/wFEAacB/QH/AUUBqAH9Af8BVwFoAX4B7wMwAUyAAAM4AVwDsAH5A/MB/wPw
        Af8D7wH/A+8B/wPwAf8D6AH/A4gB/wNZAf8DeQH/A+cB/wPwAf8D8wH/A7AB+QM4AVwDOAFcAUcBigGw
        AfkBTAGvAf4B/wFLAa4B/QH/AUsBrgH9Af8BSwGuAf0B/wFLAa8B/gH/AVYBrgH1Af8BKgE7AbIB/wIA
        AaMB/wEaAS0BrQH/AUsBqAH3Af8BTAGvAf0B/wFMAa8B/gH/AUcBigGwAfkDOAFcgAADMwFTA5YB9QP2
        Af8D8wH/A/IB/wPzAf8D8gH/A7oB/wNmAf8DXgH/A7UB/wPyAf8D9AH/A/YB/wOWAfUDMwFTAzMBUwFY
        AXwBlwH1AVMBtwH+Af8BUgG2Af0B/wFSAbYB/QH/AVIBtgH9Af8BXgG5AfwB/wFVAXcB2AH/AgoBqwH/
        AQMBDQGYAf8BNQFyAcoB/wFSAbUB/AH/AVIBtgH9Af8BUwG3Af4B/wFYAXwBlwH1AzMBU4AAAyMBMwNm
        AeID+QH/A/cB/wP2Af8D9gH/A7IB/wNeAf8DXgH/A74B/wP3Af8D9gH/A/cB/wP5Af8DZgHiAyMBMwMj
        ATMBXQFjAWYB4gFaAb4B/gH/AVkBvQH+Af8BWAG9Af4B/wFbAb4B/QH/AVIBeQHIAf8BCgEJAaAB/wEE
        AQ8BmAH/ATwBgwHQAf8BWQG+Af4B/wFZAb4B/gH/AVkBvQH+Af8BWgG+Af4B/wFdAWMBZgHiAyMBM4AA
        AwkBDANWAasD+gH/A/sB/wP6Af8D9QH/A3AB/wNOAf8DwAH/A/sB/wP6Af8D+gH/A/sB/wP6Af8DVgGr
        AwkBDAMJAQwBVAJWAasBXwHDAfwB/wFfAcQB/gH/AV8BxQH+Af8BXgHAAfkB/wEjAUEBjQH/AQYBEQFy
        Af8BQAGIAc8B/wFgAcUB/gH/AV8BxQH+Af8BXwHEAf4B/wFfAcQB/gH/AV8BwwH8Af8BVAJWAasDCQEM
        hAADLwFKA3oB7AP+Af8D/QH/A/0B/wPcAf8D1QH/A/wB/wP9Af8D/QH/A/0B/wP+Af8DegHsAy8BSggA
        Ay8BSgFkAXIBegHsAWgBzQH+Af8BZQHLAf4B/wFlAcsB/gH/AVYBrQHgAf8BUgGmAdkB/wFlAcoB/QH/
        AWUBywH+Af8BZQHLAf4B/wFlAcsB/gH/AWgBzQH+Af8BZAFyAXoB7AMvAUqIAAMEAQUDRAF7A5cB9SD/
        A5cB9QNEAXsDBAEFCAADBAEFA0QBewFmAYYBlwH1AW8B0wL/AWoB0QL/AWoB0QL/AWsB0gL/AWoB0AL/
        AWoB0AL/AWoB0QL/AW8B0wL/AWYBhgGXAfUDRAF7AwQBBYwAAwgBCwNAAXEDZwHhA+MB/hD/A+MB/gNn
        AeEDQAFxAwgBCxAAAwgBCwNAAXEBYQFkAWcB4QF8AbwB4wH+AXUB2QL/AXQB2QL/AXQB2QL/AXUB2QL/
        AXwBvAHjAf4BYQFkAWcB4QNAAXEDCAELlAADAwEEAygBPANQAZsDYQHcA6kB+AOpAfgDYQHcA1ABmwMo
        ATwDAwEEGAADAwEEAygBPANQAZsDYQHcAVwBlAGpAfgBXAGUAakB+ANhAdwDUAGbAygBPAMDAQSMAAFC
        AU0BPgcAAT4DAAEoAwABQAMAARADAAEBAQABAQUAAYAXAAP/AQAB8AEPAfABDwQAAcABAwHAAQMEAAGA
        AQEBgAEBBAABgAEBAYABAUQAAYABAQGAAQEEAAGAAQEBgAEBBAABwAEDAcABAwQAAeABBwHgAQcEAAs=
</value>
  </data>
</root>