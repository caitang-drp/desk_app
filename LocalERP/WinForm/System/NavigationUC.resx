<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="imageList1.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <data name="imageList1.ImageStream" mimetype="application/x-microsoft.net.object.binary.base64">
    <value>
        AAEAAAD/////AQAAAAAAAAAMAgAAAFdTeXN0ZW0uV2luZG93cy5Gb3JtcywgVmVyc2lvbj0yLjAuMC4w
        LCBDdWx0dXJlPW5ldXRyYWwsIFB1YmxpY0tleVRva2VuPWI3N2E1YzU2MTkzNGUwODkFAQAAACZTeXN0
        ZW0uV2luZG93cy5Gb3Jtcy5JbWFnZUxpc3RTdHJlYW1lcgEAAAAERGF0YQcCAgAAAAkDAAAADwMAAAAS
        CgAAAk1TRnQBSQFMAgEBAgEAAUABAAFAAQABEAEAARABAAT/ASEBAAj/AUIBTQE2BwABNgMAASgDAAFA
        AwABEAMAAQEBAAEgBgABECIAAwEBAgMGAQgDCwEPAxABFQMQARUDCwEPAwYBCAMBAQIgAAMBAQIDBgEI
        AwsBDwMQARUDEAEVAwsBDwMGAQgDAQECmwABAQMFAQcDFgEfAzIBUANHAYEDUAGaA1ABmgNHAYEDMgFQ
        AxYBHwMFAQcDAAEBEwABAQMFAQcDFgEfAzIBUANHAYEDUAGaA1ABmgNHAYEDMgFQAxYBHwMFAQcDAAEB
        jwABAQMHAQoDLQFFA1UBrQN7AewDzwH+A+YB/wPmAf8DzwH+A3sB7ANVAa0DLQFFAwcBCgMAAQELAAEB
        AwcBCgMtAUUDVQGtAVcBZgF8AewBMAF/Ad4B/gEnAYUB+AH/AScBhQH4Af8BMAF/Ad4B/gFXAWYBfAHs
        A1UBrQMtAUUDBwEKAwABAYgAAwUBBwMyAVEDYAHWA+kB/wPnAf8D5AH/A+MB/wPiAf8D4wH/A+cB/wPp
        Af8DYAHWAzIBUQMFAQcIAAMFAQcDMgFRAVsCYAHWASsBiQH4Af8BLgGNAfwB/wEvAY4B/QH/AS4BjQH8
        Af8BLgGMAfwB/wEuAY0B/AH/AS4BjQH8Af8BKwGJAfgB/wFbAmAB1gMyAVEDBQEHhwABAQMjATMDXwHP
        A+wB/wPmAf8D4gH/A9UB/wPVAf8D4QH/A+AB/wPiAf8D5gH/A+wB/wNfAc8DIwEzAwABAQMAAQEDIwEz
        AlwBXwHPATIBkQH7Af8BMwGSAfwB/wE0AZMB/AH/AVEBlQHuAf8BWQGXAfAB/wE5AZYB/AH/ATIBkgH8
        Af8BMwGSAfwB/wEzAZIB/AH/ATIBkQH7Af8CXAFfAc8DIwEzAwABAYAAAwgBCwNMAY8D6gH/A+kB/wPl
        Af8D3gH/A3gB/wNvAf8DyQH/A+QB/wPjAf8D5AH/A+kB/wPqAf8DTAGPAwgBCwMIAQsDTAGPATMBkgH2
        Af8BOQGZAfwB/wE5AZkB/AH/AToBlwH3Af8BKQFBAZwB/wEhASMBpwH/AVQBiAHpAf8BQAGdAf0B/wE4
        AZgB/AH/ATkBmQH8Af8BOQGZAfwB/wEzAZIB9gH/A0wBjwMIAQuAAAMdASoDYAHUA+8B/wPpAf8D5wH/
        A+UB/wOSAf8DPgH/A20B/wPLAf8D6AH/A+cB/wPpAf8D7wH/A2AB1AMdASoDHQEqAVwCYAHUAT8BoAH8
        Af8BPwGgAfwB/wE/AaAB/AH/AT8BnwH7Af8BIQFUAaoB/wIAAWgB/wEaARwBqQH/AVgBjAHpAf8BRwGl
        Af0B/wE/AaAB/AH/AT8BoAH8Af8BPwGgAfwB/wFcAmAB1AMdASqAAAMwAUwDggHvA/EB/wPsAf8D6gH/
        A+sB/wPlAf8DkAH/A0kB/wN1Af8DyQH/A+oB/wPsAf8D8QH/A4IB7wMwAUwDMAFMAVYBawGCAe8BRgGo
        Af0B/wFGAacB/QH/AUYBpwH9Af8BRgGnAf0B/wFEAaMB+AH/ASMBVQGmAf8BAAECAXcB/wEaARwBtQH/
        AVgBiQHmAf8BSAGoAfwB/wFFAacB/QH/AUYBqAH9Af8BVgFrAYIB7wMwAUyAAAM4AVwDswH5A/MB/wPw
        Af8D7wH/A+8B/wPwAf8D6AH/A4gB/wNaAf8DegH/A+cB/wPwAf8D8wH/A7MB+QM4AVwDOAFcAUcBiwGz
        AfkBTQGvAf4B/wFMAa4B/QH/AUwBrgH9Af8BTAGuAf0B/wFMAa8B/gH/AVcBrgH1Af8BKwE8AbIB/wIA
        AaMB/wEbAS4BrQH/AUwBqAH3Af8BTQGvAf0B/wFNAa8B/gH/AUcBiwGzAfkDOAFcgAADMwFTA5oB9QP2
        Af8D8wH/A/IB/wPzAf8D8gH/A7oB/wNnAf8DXwH/A7UB/wPyAf8D9AH/A/YB/wOaAfUDMwFTAzMBUwFX
        AX8BmwH1AVQBtwH+Af8BUwG2Af0B/wFTAbYB/QH/AVMBtgH9Af8BXwG5AfwB/wFWAXgB2AH/AgsBqwH/
        AQQBDgGYAf8BNgFzAcoB/wFTAbUB/AH/AVMBtgH9Af8BVAG3Af4B/wFXAX8BmwH1AzMBU4AAAyMBMwNp
        AeID+QH/A/cB/wP2Af8D9gH/A7IB/wNfAf8DXwH/A74B/wP3Af8D9gH/A/cB/wP5Af8DaQHiAyMBMwMj
        ATMBXQFkAWkB4gFbAb4B/gH/AVoBvQH+Af8BWQG9Af4B/wFcAb4B/QH/AVMBegHIAf8BCwEKAaAB/wEF
        ARABmAH/AT0BgwHQAf8BWgG+Af4B/wFaAb4B/gH/AVoBvQH+Af8BWwG+Af4B/wFdAWQBaQHiAyMBM4AA
        AwkBDANWAasD+gH/A/sB/wP6Af8D9QH/A3EB/wNPAf8DwAH/A/sB/wP6Af8D+gH/A/sB/wP6Af8DVgGr
        AwkBDAMJAQwBVAJWAasBYAHDAfwB/wFgAcQB/gH/AWABxQH+Af8BXwHAAfkB/wEkAUIBjQH/AQcBEgFz
        Af8BQQGIAc8B/wFhAcUB/gH/AWABxQH+Af8BYAHEAf4B/wFgAcQB/gH/AWABwwH8Af8BVAJWAasDCQEM
        hAADLwFKA30B7AP+Af8D/QH/A/0B/wPcAf8D1QH/A/wB/wP9Af8D/QH/A/0B/wP+Af8DfQHsAy8BSggA
        Ay8BSgFkAXYBfQHsAWkBzQH+Af8BZgHLAf4B/wFmAcsB/gH/AVcBrQHgAf8BUwGmAdkB/wFmAcoB/QH/
        AWYBywH+Af8BZgHLAf4B/wFmAcsB/gH/AWkBzQH+Af8BZAF2AX0B7AMvAUqIAAMEAQUDRAF7A5sB9SD/
        A5sB9QNEAXsDBAEFCAADBAEFA0QBewFnAYkBmwH1AXAB0wL/AWsB0QL/AWsB0QL/AWwB0gL/AWsB0AL/
        AWsB0AL/AWsB0QL/AXAB0wL/AWcBiQGbAfUDRAF7AwQBBYwAAwgBCwNAAXEDaQHhA+UB/hD/A+UB/gNp
        AeEDQAFxAwgBCxAAAwgBCwNAAXEBYQFmAWkB4QF8Ab4B5QH+AXYB2QL/AXUB2QL/AXUB2QL/AXYB2QL/
        AXwBvgHlAf4BYQFmAWkB4QNAAXEDCAELlAADAwEEAygBPANQAZsDYwHcA64B+AOuAfgDYwHcA1ABmwMo
        ATwDAwEEGAADAwEEAygBPANQAZsCYQFjAdwBXAGWAa4B+AFcAZYBrgH4AmEBYwHcA1ABmwMoATwDAwEE
        jAABQgFNAT4HAAE+AwABKAMAAUADAAEQAwABAQEAAQEFAAGAFwAD/wEAAfABDwHwAQ8EAAHAAQMBwAED
        BAABgAEBAYABAQQAAYABAQGAAQFEAAGAAQEBgAEBBAABgAEBAYABAQQAAcABAwHAAQMEAAHgAQcB4AEH
        BAAL
</value>
  </data>
</root>